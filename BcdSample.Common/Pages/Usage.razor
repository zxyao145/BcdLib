@page "/usage"

<div>
    <section>
        <h1>Usage</h1>
        <ol>
            <li>Add css and js to <strong>index.html</strong> or <strong>_Host.cshtml</strong></li>
        </ol>
        <pre><code>    &lt;link href=&quot;_content/BcdLib/index.css&quot; rel=&quot;stylesheet&quot;&gt;
 
    &lt;script src=&quot;_content/BcdLib/index.js&quot;&gt;&lt;/script&gt;
</code></pre>
        <ol start="2">
            <li>Mount BcdContainer in <strong>App.razor</strong></li>
        </ol>
        <pre><code class="language-js">&lt;Router ...&gt;
   ...
&lt;/Router&gt;

+ &lt;BcdFormContainer /&gt;
</code></pre>
        <ol start="3">
            <li>Provide IServiceProvider for BcdLib in <strong>Main method</strong> of Program.cs</li>
        </ol>
        <p>For server side:</p>
        <pre><code class="language-c#">public static void Main(string[] args)
{
    var host = CreateHostBuilder(args).Build();
+    host.Services.UseBcdForm();
    host.Run();
}
</code></pre>
        <p>For WASM:</p>
        <pre><code class="language-c#">public static async Task Main(string[] args)
{
	var builder = WebAssemblyHostBuilder.CreateDefault(args);
	builder.RootComponents.Add&lt;App&gt;(&quot;#app&quot;);
		...
	var host = builder.Build();
+	host.Services.UseBcdForm();
	await host.RunAsync();
}
</code></pre>
        <ol start="4">
            <li>Write components and inherit from BcdForm</li>
        </ol>
        <p>You must override <strong>InitComponent</strong> method. To remind developers to set some properties of the component, such as Title, it is defined as an abstract method.</p>
        <p>Sample:</p>
        <pre><code class="language-html">@@inherits BcdForm

...

@@code {
    protected override void InitComponent()
    {
        ...
    }
}
</code></pre>
        <ol start="5">
            <li>Using in your component</li>
        </ol>
        <p>Jsut like using winform:</p>
        <pre><code class="language-c#">var form = new BcdFormChild();
await form.ShowAsync();
</code></pre>
    </section>

    <section>
        <h1>BcdForm properties</h1>
        <table>
            <thead>
            <tr>
                <th>Property</th>
                <th>Type</th>
                <th>Summary</th>
                <th>Default</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>Title</td>
                <td>string</td>
                <td>the title of form. Default value is BcdForm</td>
                <td>"BcdForm"</td>
            </tr>
            <tr>
                <td>Name</td>
                <td>string</td>
                <td>Unique identification, it will be used as the Id attribute of the form root DOM. If it is not defined, it will be generated by default</td>
                <td>Bcd-[Guid]</td>
            </tr>
            <tr>
                <td>Width</td>
                <td>int</td>
                <td>The width of the form, in pixels</td>
                <td>520</td>
            </tr>
            <tr>
                <td>MinPosition</td>
                <td>MinPosition</td>
                <td>Where the form is minimized</td>
                <td>MinPosition.RightBottom</td>
            </tr>
            <tr>
                <td>BodyStyle</td>
                <td>string</td>
                <td>form body's style</td>
                <td>null</td>
            </tr>
            <tr>
                <td>DestroyOnClose</td>
                <td>bool</td>
                <td>Remove from DOM when closing. <br>If  DestroyOnClose is false, be sure to use a global variable to accept the instance of BcdForm</td>
                <td>true</td>
            </tr>
            <tr>
                <td>EnableHeader</td>
                <td>bool</td>
                <td>Allow header to be displayed</td>
                <td>true</td>
            </tr>
            <tr>
                <td>ShowMask</td>
                <td>bool</td>
                <td>Allow Mask to be displayed. Default is false</td>
                <td>false</td>
            </tr>
            <tr>
                <td>MaskStyle</td>
                <td>string</td>
                <td>the style of Mask, if ShowMask is true.</td>
                <td>null</td>
            </tr>
            <tr>
                <td>MinimizeBox</td>
                <td>bool</td>
                <td>Allow minimization</td>
                <td>true</td>
            </tr>
            <tr>
                <td>MinimizeBox</td>
                <td>bool</td>
                <td>Allow maximum</td>
                <td>true</td>
            </tr>
            <tr>
                <td>Draggable</td>
                <td>bool</td>
                <td>Allow drag</td>
                <td>false</td>
            </tr>
            <tr>
                <td>DragInViewport</td>
                <td>bool</td>
                <td>Drag is only allowed in the viewport, if Draggable is true.</td>
                <td>true</td>
            </tr>
            <tr>
                <td>Visible</td>
                <td>bool</td>
                <td><strong>Only can get</strong>. Whether the form is visible or not</td>
                <td>--</td>
            </tr>
            </tbody>
        </table>
    </section>
    
    <section>
        <strong>Be careful!</strong>
        You cannot interact with child components in the root component that inherits BcdForm, such as EventCallback or @@bind.
        But you can using Action or Func instead of EventCallback, because Action or Func do not need a RenderHandler.
    </section>
</div>

